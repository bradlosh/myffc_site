'use strict';

var xml        = require('xml'),
    mime       = require('mime'),
    fs         = require('fs');

function ifTruePush(bool, array, data) {
    if (bool) {
        array.push(data);
    }
}

function generateXML (data){

    var channel = [];
    channel.push({ title:           { _cdata: data.title } });
  //  channel.push({ description:     { _cdata: data.description || data.title } });
    channel.push({ description:   {_cdata: 'Welcome to the audio podcast from Pastors Frank and Judi Jones and FFC in Taylors, SC.  For more information visit myffc.org' } });
    channel.push({ link:            data.site_url || 'http://github.com/dylang/node-rss' });
    channel.push({ subtitle:        { _cdata: data.subtitle || 'Faith Family Church, Taylors, SC' } });
    channel.push({ 'itunes:subtitle':        { _cdata: data.subtitle || 'Faith Family Church, Taylors, SC' } });
    // image_url set?
    if (data.image_url) {
        channel.push({ image:  [ {url: data.image_url}, {title: data.title},  {link: data.site_url} ] });
	channel.push({'itunes:image':{ _attr: {href: data.image_url}}});
    }
    var catexp = [];
    var catmain = [];
    catexp.push({'itunes:category':{ _attr: {text:'Christianity'}}});
    catmain.push({'itunes:category':{ _attr: {text:'Religion & Spirituality'}}});
  //  catmain.push(catexp);
   // channel.push(channel,catmain);
    var iowner = [];
    iowner.push({'itunes:name':'FFC'});
    iowner.push({'itunes:email':'info@myffc.org'});
    channel.push({'itunes:owner':iowner});
    channel.push({'itunes:author':  "Pastors Frank and Judi Jones"});
    channel.push({'itunes:category':{ _attr: {text:'Religion & Spirituality'}}});
    channel.push({'itunes:explicit':  "no"});
    
    
    channel.push({ generator:       data.generator });
    channel.push({ lastBuildDate:   new Date().toLocaleString() });
//    channel.push(data.customElements);

    ifTruePush(data.feed_url, channel, { 'atom:link': { _attr: { href: data.feed_url, rel: 'self', type: 'application/rss+xml' } } });
    ifTruePush(data.author, channel, { 'author': { _cdata: data.author } });
    var pdate = new Date(data.pubDate);
    pdate.setHours(pdate.getHours()+17);
//    ifTruePush(data.pubDate, channel, { 'pubDate': new Date(data.pubDate).toLocaleString() });
    ifTruePush(data.pubDate, channel, { 'pubDate': new Date(pdate).toLocaleString() });
    ifTruePush(data.copyright, channel, { 'copyright':  { _cdata: data.copyright } });
    ifTruePush(data.language, channel, { 'language': { _cdata: data.language } });
    ifTruePush(data.managingEditor, channel, { 'managingEditor': { _cdata: data.managingEditor } });
    ifTruePush(data.webMaster, channel, { 'webMaster': { _cdata: data.webMaster } });
    ifTruePush(data.docs, channel, { 'docs': data.docs });
    ifTruePush(data.ttl, channel, { 'ttl': data.ttl });
    ifTruePush(data.hub, channel, { 'atom:link': { _attr: { href: data.hub, rel: 'hub' } } });

    if (data.categories) {
        data.categories.forEach(function(category) {
            ifTruePush(category, channel, { category: { _cdata: category } });
        });
    }
//    ifTruePush(data.custom_elements, channel, data.custom_elements);
 //   ifTruePush(data.customElements, channel, data.customElements);

    data.items.forEach(function(item) {
        var item_values = [
                    { title:        { _cdata: item.title } }
                ];
        ifTruePush(item.description, item_values, { description:  { _cdata: item.description } });
        ifTruePush(item.url, item_values, { link: item.url });
        ifTruePush(item.link || item.guid || item.title, item_values, { guid:         [ { _attr: { isPermaLink: !item.guid && !!item.url } }, item.guid || item.url || item.title ]  });

        item.categories.forEach(function(category) {
            ifTruePush(category, item_values, { category: { _cdata: category } });
        });

        ifTruePush(item.author || data.author, item_values, { 'dc:author': { _cdata: item.author || data.author } });
        ifTruePush(item.author || data.author, item_values, { 'itunes:author': { _cdata: item.author || data.author } });

        var idate = new Date(item.date);
        idate.setHours(idate.getHours()+17);
//        ifTruePush(item.date, item_values, { pubDate:      new Date(item.date).toLocaleString() });
        ifTruePush(item.date, item_values, { pubDate:      new Date(idate).toLocaleString() });

        //Set GeoRSS to true if lat and long are set
        data.geoRSS = data.geoRSS || (item.lat && item.long);
        ifTruePush(item.lat, item_values, {'geo:lat': item.lat});
        ifTruePush(item.long, item_values, {'geo:long': item.long});

        if( item.enclosure && item.enclosure.url ) {
            if( item.enclosure.file ) {
                item_values.push({
                    enclosure : {
                        _attr : {
                            url : item.enclosure.url,
                            length : fs.statSync(item.enclosure.file).size,
                            type : mime.lookup(item.enclosure.file)
                        }
                    }
                });
            } else {
                item_values.push({
                    enclosure : {
                        _attr : {
                            url : item.enclosure.url,
                            length : item.enclosure.size || 0,
                            type : mime.lookup(item.enclosure.url)
                        }
                    }
                });
            }
        }
                item_values.push({
                    enclosure : {
                        _attr : {
                            url : item.enclosure,
                            //length : item.enclosure.size || 0,
  //                          length : fs.statSync(item.enclosure).size || 0,
                            type : mime.lookup(item.enclosure)
                        }
                    }
                });
                ifTruePush(item.custom_elements, item_values, item.custom_elements);

        channel.push({ item: item_values });

    });

    //set up the attributes for the RSS feed.
    var _attr = {
        'xmlns:dc':         'http://purl.org/dc/elements/1.1/',
        'xmlns:content':    'http://purl.org/rss/1.0/modules/content/',
        'xmlns:atom':       'http://www.w3.org/2005/Atom',
	'xmlns:itunes':      'http://www.itunes.com/dtds/podcast-1.0.dtd',
        version: '2.0'
    };

    //only add namespace if GeoRSS is true
    if(data.geoRSS){
        _attr['xmlns:geo'] = 'http://www.w3.org/2003/01/geo/wgs84_pos#';
    }

    return {
        rss: [
            { _attr: _attr },
            { channel: channel }
        ]
    };
}

function RSS (options, items) {
    options = options || {};

    this.title          = options.title || 'Untitled RSS Feed';
    this.description    = options.description || '';
    this.generator      = options.generator || 'RSS for Node';
    this.feed_url       = options.feed_url;
    this.site_url       = options.site_url;
    this.image_url      = options.image_url;
    this.author         = options.author;
    this.categories     = options.categories;
    this.pubDate        = options.pubDate;
    this.hub            = options.hub;
    this.docs           = options.docs;
    this.copyright      = options.copyright;
    this.language       = options.language;
    this.managingEditor = options.managingEditor;
    this.webMaster      = options.webMaster;
    this.ttl            = options.ttl;
    this.customElements = options.custom_elements;
    //option to return feed as GeoRSS is set automatically if feed.lat/long is used
    this.geoRSS         = options.geoRSS || false;
    this.items          = items || [];

    this.item = function (options) {
        options = options || {};
        var item = {
            title:          options.title || 'No title',
            description:    options.description || '',
            url:            options.url,
            guid:           options.guid,
            categories:     options.categories || [],
            author:         options.author,
            date:           options.date,
            lat:            options.lat,
            long:           options.long,
            enclosure:      options.enclosure || false
        };

        this.items.push(item);
        return this;
    };

    this.xml = function(indent) {
        return '<?xml version="1.0" encoding="UTF-8"?>\n' +
            xml(generateXML(this), indent);
    };
}

module.exports = RSS;
